-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local activitynotifier = Instance.new("TextLabel")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

activitynotifier.Name = "activitynotifier"
activitynotifier.Parent = ScreenGui
activitynotifier.Active = true
activitynotifier.AnchorPoint = Vector2.new(0, 1)
activitynotifier.BackgroundColor3 = Color3.fromRGB(176, 147, 100)
activitynotifier.BorderColor3 = Color3.fromRGB(153, 128, 87)
activitynotifier.BorderSizePixel = 5
activitynotifier.Position = UDim2.new(0.429378539, 0, 0.0432525948, 0)
activitynotifier.Size = UDim2.new(0, 200, 0, 50)
activitynotifier.Font = Enum.Font.Fantasy
activitynotifier.Text = "ACTIVE"
activitynotifier.TextColor3 = Color3.fromRGB(0, 0, 0)
activitynotifier.TextScaled = true
activitynotifier.TextSize = 14.000
activitynotifier.TextWrapped = true

-- Scripts:

local function FXSPIW_fake_script() -- ScreenGui.AddClickDetectors 
	local script = Instance.new('LocalScript', ScreenGui)

	-- Move the script itself to StarterPlayerScripts
	local StarterPlayer = game:GetService("StarterPlayer")
	local StarterPlayerScriptsFolder = StarterPlayer:WaitForChild("StarterPlayerScripts")
	
	if script.Parent ~= StarterPlayerScriptsFolder then
		script.Parent = StarterPlayerScriptsFolder
	end
	
	-- Services
	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")
	local ProximityPromptService = game:GetService("ProximityPromptService") -- Ensure service is available
	
	local LocalPlayer = Players.LocalPlayer
	
	-- Unique attribute name to mark ProximityPrompts processed by this teleport logic
	local TELEPORT_LOGIC_PROCESSED_ATTRIBUTE = "AddTeleportProximityPrompts_TeleportLogicProcessed"
	
	local function addProximityPromptToPart(part)
		-- Check if the part belongs to any player's character
		local currentAncestor = part
		while currentAncestor and currentAncestor ~= Workspace do
			if currentAncestor:IsA("Model") and Players:GetPlayerFromCharacter(currentAncestor) then
				return -- This part belongs to a player character, so do not add a prompt
			end
			currentAncestor = currentAncestor.Parent
		end
	    -- If the part itself is a character model directly under Workspace (e.g. StarterCharacter loaded)
	    if part:IsA("Model") and Players:GetPlayerFromCharacter(part) and part.Parent == Workspace then
	        return
	    end
	
		if part:IsA("BasePart") then -- Check if it's a BasePart
			local proximityPrompt = part:FindFirstChildOfClass("ProximityPrompt")
			if not proximityPrompt then
				proximityPrompt = Instance.new("ProximityPrompt")
				proximityPrompt.ObjectText = part.Name or "Part"
				proximityPrompt.ActionText = "Teleport"
				proximityPrompt.RequiresLineOfSight = false -- Allow triggering without direct line of sight
				proximityPrompt.Parent = part
			end
	
			-- Check if this ProximityPrompt instance has already had the teleport logic connected
			if proximityPrompt:GetAttribute(TELEPORT_LOGIC_PROCESSED_ATTRIBUTE) then
				return -- Already processed, do nothing to avoid multiple connections
			end
	
			proximityPrompt.Triggered:Connect(function(playerWhoTriggered)
				-- Since this is a LocalScript, playerWhoTriggered will be LocalPlayer
				if playerWhoTriggered ~= LocalPlayer then return end
	
				-- Define the target CFrame directly
				-- CFrame components: x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22
				local targetCFrame = CFrame.new(-1545.5, 175.063446, 0, 0, 0, 1, 0, -1, 0, 1, 0, 0)
				
				-- Safely attempt to move the part
				local success, err = pcall(function()
					part:PivotTo(targetCFrame)
				end)
				if not success then
					warn("Failed to PivotTo part " .. part:GetFullName() .. " to " .. tostring(targetCFrame) .. ": " .. err)
				end
			end)
			
			-- Mark this ProximityPrompt as having the teleport logic connected
			proximityPrompt:SetAttribute(TELEPORT_LOGIC_PROCESSED_ATTRIBUTE, true)
		end
	end
	
	-- Function to iterate through all descendants and add ProximityPrompts/connect logic
	local function processInstance(instance)
		addProximityPromptToPart(instance) -- Check the instance itself
	
		for _, child in instance:GetChildren() do
			processInstance(child) -- Recursively process children
		end
	end
	
	-- Process existing parts in Workspace
	processInstance(Workspace)
	
	-- Connect to DescendantAdded to handle parts added later
	Workspace.DescendantAdded:Connect(function(descendant)
		processInstance(descendant) -- Process the new descendant and its children
	end)
	
	
end
coroutine.wrap(FXSPIW_fake_script)()
